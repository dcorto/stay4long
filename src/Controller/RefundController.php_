<?php

namespace StayForLongApi\Http\Controllers\Billing;

use Illuminate\Http\Request;
use StayForLongApi\Exceptions\Services\Billing\PaymentException;
use StayForLongApi\Http\Controllers\Controller;
use StayForLongApi\Models\StayForLong\Bookings;
use StayForLongApi\Services\Notifications\Internal\FollowActions;
use GuzzleHttp\Client;
use StayForLong\Context\Billing\Infrastructure\Exception\OgoneConfigurationFactoryException;
use StayForLongApi\Exceptions\Services\Billing\RefundPayment\RefundPaymentException;
use StayForLongApi\Models\StayForLong\Tickets;
use StayForLongApi\Services\Billing\Tickets\RefundableAmount as TicketRefundableAmount;
use StayForLongApi\Services\Billing\Tickets\Update as TicketUpdate;

class RefundController extends Controller
{
    const TICKET_DESCRIPTION = "Booking refunded"; //DCC: This should be a ticket status/property. Not managed here.

    public $request;
    public $booking;
    public $internal_user;

    public function refundAll(Request $request)
    {
        $this->request = $request;

        $hash                = $request->get('id');
        $this->internal_user = $request->get('internal_user');

        $this->booking = Bookings::with("tickets")->whereHash($hash)->first();
        if (empty($this->booking)) {
            PaymentException::throwBecauseOf("Booking with hash {$hash} not found!");
        }

        $reason = $this->request->input('reason', '');

        //DCC: This logic shoud be extracted to a method. And is the Booking responsability got the tickets for refund.
        // If not, this method will be duplicated on all the app.
        $total_already_paid = 0;
        $tickets            = $this->booking->tickets->toArray();
        foreach ($tickets as $ticket) {
            if (!empty($ticket['tpv_reference']) && "success" == $ticket['payment_status']) {
                $total_already_paid += $ticket['total'];
            }
        }

        $this->doRefund($this->booking, $total_already_paid, $reason);
    }

    public function refundPartial(Request $request)
    {
        $this->request = $request;

        $hash                = $request->input('id');
        $this->internal_user = $request->get('internal_user');

        $this->booking = Bookings::query()->loadRelation('tickets')->where('hash', '=', $hash)->first();
        if (empty($this->booking)) {
            PaymentException::throwBecauseOf("Booking with hash {$hash} not found!");
        }

        $amount = (float)$this->request->input('amount'); //DCC: $amount should be a value object.
        $reason = $this->request->input('reason', '');

        $this->doRefund($this->booking, $amount, $reason);
    }

    //DCC: This method should be moved out of the controller. And a best option is take as argument a DTO and not a list of parameters.
    public function doRefund(Bookings $booking, $amount, $reason = "")
    {
        $this->booking = $booking;

        if (0 == $amount) {
            throw new \InvalidArgumentException('Cannot refund an amount of 0.0');
        }

        $this->amount = $amount;
        $this->reason = $reason;

        $this->refund($this->amount);
    }

    //DCC: Same as applyRefund. This is wrong to be here.
    public function refund($pending_refund_amount)
    {
        foreach ($this->booking->tickets as $ticket) {

            $pending_refund_amount = $this->refundTicket($ticket, $pending_refund_amount);

            if ($pending_refund_amount <= 0) {
                break;
            }
        }
    }

    //DCC: Same as applyRefund. No sense here. And $pending_refund_amount should be a Value Object.
    protected function refundTicket(Tickets $ticket, $pending_refund_amount)
    {
        $refunded = $this->applyRefund($ticket, $pending_refund_amount);
        $pending_refund_amount = $pending_refund_amount - $refunded;

        return $pending_refund_amount;
    }

    //DCC: That could be ok. But in my opinion is a View Layer responsability "prepare" how it show look the data. This is a Controller.
    protected function getTicketDescription()
    {
        if (empty($this->reason)) {
            return self::TICKET_DESCRIPTION;
        }
        return sprintf('%s: %s', self::TICKET_DESCRIPTION, $this->reason);
    }

    //DCC: This must be on a service layer. Not here. And $amount maybe should be a Value Object. Is a common object on the business.
    public function applyRefund(Tickets $ticket, $amount)
    {
        /**
         * This class does the refund. Returns the amount refunded for the ticket.
         * The amount refunded may be 0 if the ticket has been refunded already.
         */
    }

    //DCC: This method is not used on this Controller. Why? If not is needed here, is not his place to be.
    private function sendInternalNotification($message)
    {
        $bookingProcess = new FollowActions($this->booking, $message);
        $bookingProcess->send();
    }
}